{
	// Place your AtCoder ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	// input / int----------------------------------------------------
	"int input": {
		"scope": "python",
		"prefix": "ii",
		"body": [
			"n = int(input())",
		],
		"description": "1つの整数を入力"
	},

	"multi int input": {
		"scope": "python",
		"prefix": "mii",
		"body": [
			"a, b = map(int, input().split())",
		],
		"description": "複数の整数を入力"
	},

	"list int input": {
		"scope": "python",
		"prefix": "lii",
		"body": [
			"a = list(map(int, input().split()))",
		],
		"description": "整数のリストを入力"
	},

	"tow-dimentions int array input": {
		"scope": "python",
		"prefix": "tdi",
		"body": [
			"h, w = map(int, input().split())",
			"a = [list(map(int, input().split())) for _ in range(h)]",
		],
		"description": "2次元のリストを入力"
	},

	// input / str----------------------------------------------------
	"str input": {
		"scope": "python",
		"prefix": "si",
		"body": [
			"s = input()",
		],
		"description": "1つの文字列を入力"
	},

	"multi str input": {
		"scope": "python",
		"prefix": "msi",
		"body": [
			"s, t = input().split()",
		],
		"description": "複数の文字列を入力"
	},

	"list str input": {
		"scope": "python",
		"prefix": "lsi",
		"body": [
			"s = list(input().split())",
		],
		"description": "文字列のリストを入力"
	},

	"list str input horizon": {
		"scope": "python",
		"prefix": "lsih",
		"body": [
			"n = int(input())",
			"s = [input() for i in range(n)]",
		],
		"description": "縦方向の文字列をリストで入力"
	},

	"tow-dimentions str array input": {
		"scope": "python",
		"prefix": "tds",
		"body": [
			"h, w = map(int, input().split())",
			"a = [list(input().split()) for _ in range(h)]",
		],
		"description": "空白区切の２次元の文字列をリストで入力"
	},

	// init ---------------------------------------------
	"one-dimention array": {
		"scope": "python",
		"prefix": "oda",
		"body": [
			"a = [None]*n",
		],
		"description": "サイズnの1次元配列を作成"
	},

	"two-dimentions array": {
		"scope": "python",
		"prefix": "tda",
		"body": [
			"a = [[0]*(m) for i in range(n)]",
		],
		"description": "行n, 幅mの2次元配列を作成"
	},

	"graph for n-edges": {
		"scope": "python",
		"prefix": "graph",
		"body": [
			"from collections import defaultdict",
			"n = int(input())",
			"g = defaultdict(list)",
			"for _ in range(n):",
			"    a, b = map(int, input().split())",
			"    a -= 1",
			"    b -= 1",
			"    g[a].append(b)",
			"    g[b].append(a)",
		],
		"description": "辺がn個のグラフを作成"
	},

	// other ---------------------------------------------
	"repeat": {
		"scope": "python",
		"prefix": "rep",
		"body": [
			"for i in range(n):",
		],
		"description": "forループ"
	},

	"init inf": {
		"scope": "python",
		"prefix": "inf",
		"body": [
			"x = float('inf')",
		],
		"description": "無限大の初期値を用意"
	},

	"init vector": {
		"scope": "python",
		"prefix": "vec",
		"body": [
			"vec = [[-1, 0], [1, 0], [0, -1], [0, 1]] #i,j",
		],
		"description": "２次元配列で移動できる方向を定義"
	},

	"set recursion limit": {
		"scope": "python",
		"prefix": "srl",
		"body": [
			"import sys",
			"sys.setrecursionlimit(10**9)",
		],
		"description": "再帰関数のおまじない. pythonで提出"
	},
}